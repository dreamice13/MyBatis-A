<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
    <resultMap type="tk.mybatis.simple.model.SysUser" id="userMap">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time"  jdbcType="TIMESTAMP"/>
    </resultMap>
    
    <resultMap type="tk.mybatis.simple.model.SysUser" extends="userMap" id="userRoleMap">
        <id property="role.id" column="role_id"/>
        <result property="role.roleName" column="role_name"/>
        <result property="role.enabled" column="enabled"/>
        <result property="role.createBy" column="create_by"/>
        <result property="role.createTime" column="role_create_time"  jdbcType="TIMESTAMP"/>
    </resultMap>
    
    <resultMap type="tk.mybatis.simple.model.SysUser" extends="userMap" id="userRoleMap2">
        <association property="role" columnPrefix="role_" javaType="tk.mybatis.simple.model.SysRole">
            <id property="id" column="id"/>
            <result property="roleName" column="role_name"/>
            <result property="enabled" column="enabled"/>
            <result property="createBy" column="create_by"/>
            <result property="createTime" column="create_time"  jdbcType="TIMESTAMP"/>
        </association>
    </resultMap>
    
    <resultMap type="tk.mybatis.simple.model.SysUser" extends="userMap" id="userRoleMap3">
        <association property="role" columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap"/>
    </resultMap>
    
    <resultMap type="tk.mybatis.simple.model.SysUser" extends="userMap" id="userRoleMapSelect">
        <association property="role" column="{id=role_id}" fetchType="lazy" select="tk.mybatis.simple.mapper.RoleMapper.selectRoleById"/>
    </resultMap>
    
    <resultMap type="tk.mybatis.simple.model.SysUser" extends="userMap" id="userRoleListMap">
        <collection property="roleList"  columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.rolePrivilegeListMap"/>
    </resultMap>
    
    <resultMap type="tk.mybatis.simple.model.SysUser" extends="userMap" id="userRoleListMapSelect">
        <collection property="roleList" column="{user_id=id}" fetchType="lazy" select="tk.mybatis.simple.mapper.RoleMapper.selectRoleByUserId"/>
    </resultMap>
    
    <select id="selectById" resultMap="userMap">
        select * from sys_user where id = #{id}
    </select>
    
    <select id="selectAll" resultType="tk.mybatis.simple.model.SysUser">
        select id, user_name userName, 
            user_password userPassword, 
            user_email userEmail, 
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
    </select>
    
    <select id="selectRolesByUserId" resultType = "tk.mybatis.simple.model.SysRole">
        select 
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime,
            <!-- u.user_name userName -->
            u.user_name as "user.userName",
            u.user_email as "user.userEmail"
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId}
    </select>
    
    <insert id="insert">
        insert into sys_user (
            id, user_name, user_password, user_email, user_info, head_img, create_time
        ) values (
            #{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP} 
        )
    </insert>
    
    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user (
            user_name, user_password, user_email, user_info, head_img, create_time
        ) values (
            #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP} 
        )
    </insert>
    
    <insert id="insert3" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user (
            user_name, user_password, user_email, user_info, head_img, create_time
        ) values (
            #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP} 
        )
        <selectKey keyColumn="id" resultType="Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>
    
    <update id="updateById">
        update sys_user
        set
            user_name =  #{userName}, user_password = #{userPassword}, 
            user_email = #{userEmail}, user_info = #{userInfo}, head_img = #{headImg, jdbcType=BLOB}, 
            create_time = #{createTime, jdbcType=TIMESTAMP} 
        where id = #{id}
    </update>
    
    <delete id="deleteById">
        delete from sys_user where id = #{id}
    </delete>
    
    <select id="selectRolesByUserIdAndRoleEnabled" resultType = "tk.mybatis.simple.model.SysRole">
        select 
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        <!-- where u.id = #{userId} and r.enabled =  #{enabled} -->
        where u.id = #{user.id} and r.enabled =  #{role.enabled}
    </select>
    
    <select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
        select id, user_name userName, 
            user_password userPassword, 
            user_email userEmail, 
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
        where 1 = 1
        <if test="userName != null and userName != ''">
            and user_name like concat('%', #{userName}, '%')
        </if>
        <if test="userEmail != null and userEmail != ''">
            and user_email = #{userEmail}
        </if>
    </select>
    
    <update id="updateByIdSelective">
        update sys_user
        set
            <if test="userName != null and userName!=''">
                user_name =  #{userName},
            </if>
            <if test="userPassword != null and userPassword != ''">
                user_password = #{userPassword}, 
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo != ''">
                user_info = #{userInfo},
            </if>
            <if test="headImg != null and headImg != ''">
                head_img = #{headImg, jdbcType=BLOB}, 
            </if>
            <if test="createTime != null and createTime != ''">
                create_time = #{createTime, jdbcType=TIMESTAMP}
            </if>
             id = #{id}
        where id = #{id}
    </update>
    
    <select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
        select id, user_name userName, 
            user_password userPassword, 
            user_email userEmail, 
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
        where 1 = 1
        <choose>
            <when test="id != null and id != ''">
                and id = #{id}
            </when>
            <when test="userName != null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>
    </select>
    
    <select id="selectByUserTrim" resultType="tk.mybatis.simple.model.SysUser">
        select id, user_name userName, 
            user_password userPassword, 
            user_email userEmail, 
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
        <trim prefix="where" prefixOverrides="and | or ">
            <if test="userName != null and userName != ''">
                and user_name like concat('%', #{userName}, '%')
            </if>
            <if test="userEmail != null and userEmail != ''">
                and user_email = #{userEmail}
            </if>
        </trim>
    </select>
    
    <select id="selectByUserWhere" resultType="tk.mybatis.simple.model.SysUser">
        select id, user_name userName, 
            user_password userPassword, 
            user_email userEmail, 
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
        <where>
            <if test="userName != null and userName != ''">
                and user_name like concat('%', #{userName}, '%')
            </if>
            <if test="userEmail != null and userEmail != ''">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>
    
    <update id="updateByIdSelectiveSet">
        update sys_user
        <set>
            <if test="userName != null and userName!=''">
                user_name =  #{userName},
            </if>
            <if test="userPassword != null and userPassword != ''">
                user_password = #{userPassword}, 
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo != ''">
                user_info = #{userInfo},
            </if>
            <if test="headImg != null and headImg != ''">
                head_img = #{headImg, jdbcType=BLOB}, 
            </if>
            <if test="createTime != null and createTime != ''">
                create_time = #{createTime, jdbcType=TIMESTAMP}
            </if>
            id = #{id}
        </set>
        where id = #{id}
    </update>
    
    <select id="selectByIdList" resultMap="userMap">
        select * from sys_user 
        where id in 
        <foreach collection="list" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>
    
    <select id="selectByIdListArray" resultMap="userMap">
        select * from sys_user 
        where id in 
        <foreach collection="array" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>
    
    <select id="selectByIdListMap" resultMap="userMap">
        select * from sys_user 
        where id in 
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>
    
    <select id="selectByIdListParam" resultMap="userMap">
        select * from sys_user 
        where id in 
        <foreach collection="idParam" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>
    
    <select id="selectUserByBind" resultMap="userMap">
        select * from sys_user 
        where 1=1
        <if test="userName != null and userName != ''">
            <bind name="uName" value="'%' + userName + '%'"/>
            and user_name like #{uName}
        </if>
    </select>
    
    <select id="SelectTime"   resultType="String" databaseId="oracle">
        SELECT  'oralce'||to_char(sysdate,'yyyy-mm-dd hh24:mi:ss')  FROM dual 
    </select>
    
    <select id="SelectTime"   resultType="String" databaseId="mysql">
        SELECT  NOW() FROM dual 
    </select>
    
    <select id="selectUserAndRolesById" resultType="tk.mybatis.simple.model.SysUser">
        select 
            u.id,
            u.user_name userName,
            u.user_password userPassword,
            u.user_email userEmail,
            u.user_info userInfo,
            u.head_img headImg,
            u.create_time createTime,
            r.id "role.id",
            r.role_name "role.roleName",
            r.enabled "role.enabled",
            r.create_by "role.createBy",
            r.create_time "role.createTime"
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>
    <select id="selectUserAndRolesById2" resultMap="userRoleMap">
        select 
            u.id,
            u.user_name userName,
            u.user_password userPassword,
            u.user_email userEmail,
            u.user_info userInfo,
            u.head_img headImg,
            u.create_time createTime,
            r.id role_id,
            r.role_name,
            r.enabled,
            r.create_by,
            r.create_time role_create_time
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>
    <!-- <select id="selectUserAndRolesById3" resultMap="userRoleMap2"> -->
    <select id="selectUserAndRolesById3" resultMap="userRoleMap3">
        select 
            u.id,
            u.user_name userName,
            u.user_password userPassword,
            u.user_email userEmail,
            u.user_info userInfo,
            u.head_img headImg,
            u.create_time createTime,
            r.id role_id,
            r.role_name role_role_name,
            r.enabled role_enabled,
            r.create_by role_create_by,
            r.create_time role_create_time
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>
    
    <select id="selectUserAndRolesByIdSelect" resultMap="userRoleMapSelect">
        select 
            u.id,
            u.user_name userName,
            u.user_password userPassword,
            u.user_email userEmail,
            u.user_info userInfo,
            u.head_img headImg,
            u.create_time createTime,
            ur.role_id
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        where u.id = #{id}
    </select>
    
    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
        select 
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            r.id role_id,
            r.role_name role_role_name,
            r.enabled role_enabled,
            r.create_by role_create_by,
            r.create_time role_create_time
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
    </select>
    
    <select id="selectAllUserAndRolesAndPrivilege" resultMap="userRoleListMap">
        select 
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            r.id role_id,
            r.role_name role_role_name,
            r.enabled role_enabled,
            r.create_by role_create_by,
            r.create_time role_create_time,
            p.id role_privilege_id,
            p.privilege_name role_privilege_privilege_name,
            p.privilege_url role_privilege_privilege_url
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        inner join sys_role_privilege rp on r.id = rp.role_id
        inner join sys_privilege p on rp.privilege_id = p.id
    </select>
    
    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
        select 
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time
        from sys_user u
        where u.id = #{id}
    </select>
</mapper>
